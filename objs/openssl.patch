diff -urN /home/oslab/openssl-1.1.1w/crypto/armcap.c ./openssl-1.1.1w/crypto/armcap.c
--- /home/oslab/openssl-1.1.1w/crypto/armcap.c	2023-09-11 22:08:11.000000000 +0800
+++ ./openssl-1.1.1w/crypto/armcap.c	2024-03-23 12:34:43.832065704 +0800
@@ -228,12 +228,12 @@
             _armv8_sha256_probe();
             OPENSSL_armcap_P |= ARMV8_SHA256;
         }
-#  if defined(__aarch64__) && !defined(__APPLE__)
+/*#  if defined(__aarch64__) && !defined(__APPLE__)
         if (sigsetjmp(ill_jmp, 1) == 0) {
             _armv8_sha512_probe();
             OPENSSL_armcap_P |= ARMV8_SHA512;
         }
-#  endif
+#  endif*/
     }
 # endif
 
diff -urN /home/oslab/openssl-1.1.1w/crypto/mem_sec.c ./openssl-1.1.1w/crypto/mem_sec.c
--- /home/oslab/openssl-1.1.1w/crypto/mem_sec.c	2023-09-11 22:08:11.000000000 +0800
+++ ./openssl-1.1.1w/crypto/mem_sec.c	2024-03-23 12:25:12.384942498 +0800
@@ -30,7 +30,7 @@
 # if defined(OPENSSL_SYS_LINUX)
 #  include <sys/syscall.h>
 #  if defined(SYS_mlock2)
-#   include <linux/mman.h>
+//#   include <linux/mman.h>
 #   include <errno.h>
 #  endif
 # endif
diff -urN /home/oslab/openssl-1.1.1w/include/internal/refcount.h ./openssl-1.1.1w/include/internal/refcount.h
--- /home/oslab/openssl-1.1.1w/include/internal/refcount.h	2023-09-11 22:08:11.000000000 +0800
+++ ./openssl-1.1.1w/include/internal/refcount.h	2024-03-23 12:25:10.525019102 +0800
@@ -16,11 +16,11 @@
 #  endif
 # endif
 
-# if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L \
+/*# if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L \
      && !defined(__STDC_NO_ATOMICS__)
 #  include <stdatomic.h>
 #  define HAVE_C11_ATOMICS
-# endif
+# endif*/
 
 # if defined(HAVE_C11_ATOMICS) && defined(ATOMIC_INT_LOCK_FREE) \
      && ATOMIC_INT_LOCK_FREE > 0
diff -urN /home/oslab/openssl-1.1.1w/include/internal/tsan_assist.h ./openssl-1.1.1w/include/internal/tsan_assist.h
--- /home/oslab/openssl-1.1.1w/include/internal/tsan_assist.h	2023-09-11 22:08:11.000000000 +0800
+++ ./openssl-1.1.1w/include/internal/tsan_assist.h	2024-03-23 12:31:54.437831507 +0800
@@ -47,7 +47,7 @@
  * can use TSAN_QUALIFIER in cast specifically when it has to count.
  */
 
-#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L \
+/*#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L \
     && !defined(__STDC_NO_ATOMICS__)
 # include <stdatomic.h>
 
@@ -77,7 +77,7 @@
 
 #elif defined(_MSC_VER) && _MSC_VER>=1200 \
       && (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_X64) || \
-          defined(_M_ARM64) || (defined(_M_ARM) && _M_ARM >= 7 && !defined(_WIN32_WCE)))
+          defined(_M_ARM64) || (defined(_M_ARM) && _M_ARM >= 7 && !defined(_WIN32_WCE)))*/
 /*
  * There is subtle dependency on /volatile:<iso|ms> command-line option.
  * "ms" implies same semantic as memory_order_acquire for loads and
@@ -89,7 +89,7 @@
  * with additional instructions and penalties, it kind of makes sense to
  * default to "iso"...
  */
-# define TSAN_QUALIFIER volatile
+/*# define TSAN_QUALIFIER volatile
 # if defined(_M_ARM) || defined(_M_ARM64)
 #  define _InterlockedExchangeAdd _InterlockedExchangeAdd_nf
 #  pragma intrinsic(_InterlockedExchangeAdd_nf)
@@ -126,7 +126,7 @@
 #  define tsan_st_rel(ptr, val) (*(ptr) = (val))
 # endif
 
-#endif
+#endif*/
 
 #ifndef TSAN_QUALIFIER
 
